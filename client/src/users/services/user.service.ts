import { Injectable } from '@nestjs/common';
import { GetUserInterface } from '../interfaces/get.user.interface';
import { SubscriptionService } from '../../subscription/services/subscription.serivce';
import { Observable, Subject } from 'rxjs';
import { AddSubscriptionResponse, User } from "../../proto/build/user.pb";
import { Markup } from 'telegraf';

@Injectable()
export class UserService {
  constructor(private readonly subscriptionService: SubscriptionService) {}

  public getUser(user: GetUserInterface): Observable<User> {
    const userSubject = new Subject<User>();
    this.subscriptionService.getUser(user).subscribe((res) => {
      userSubject.next(res);
    });
    return userSubject;
  }

  public getRejectTemplate(): string {
    return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ üôÅ 
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É üôÇüëç"`;
  }

  public getSubscriptionKeyboard() {
    return Markup.inlineKeyboard([
      Markup.button.callback('–ù–µ–¥–µ–ª—è - 169 —Ä—É–±', 'week'),
      Markup.button.callback('–ú–µ—Å—è—Ü - 359 —Ä—É–±.', 'month'),
    ]);
  }

  public removeFreeRequest(extId: number): Observable<AddSubscriptionResponse> {
    return this.subscriptionService.removeFreeRequest(extId);
  }
}
