import { Injectable, UnprocessableEntityException } from '@nestjs/common';
import { GetUserInterface } from '../interfaces/get.user.interface';
import { catchError, Observable, of, switchMap } from 'rxjs';
import {
  AddSubscriptionRequest,
  AddSubscriptionResponse,
  HasActiveSubscriptionResponse,
  User,
} from '../../proto/build/user.pb';
import { Markup } from 'telegraf';
import { SubscriptionService } from '../../subscription/services/subscription.serivce';

@Injectable()
export class UserService {
  constructor(private readonly subscriptionService: SubscriptionService) {}

  public getUser(user: GetUserInterface): Observable<User> {
    return this.subscriptionService.getUser(user);
  }

  public getRejectTemplate(): string {
    return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ üôÅ\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É üôÇüëç`;
  }

  public addSubscription(
    request: AddSubscriptionRequest,
  ): Observable<AddSubscriptionResponse> {
    return this.subscriptionService.hasActiveSubscription(request.extId).pipe(
      catchError((err) => {
        console.error(err);
        return of();
      }),
      switchMap((hasActiveSubscription) => {
        if (hasActiveSubscription.isActive) {
          throw new UnprocessableEntityException('–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!');
        }
        return this.subscriptionService.addSubscription(request);
      }),
    );
  }

  public createPaymentButton(duration: string) {
    return Markup.inlineKeyboard([
      [Markup.button.url('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/okay_ai_chat')],
    ]);
  }

  public getSubscriptionKeyboard() {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('–ù–µ–¥–µ–ª—è - 169 —Ä—É–±', 'week'),
        Markup.button.callback('–ú–µ—Å—è—Ü - 359 —Ä—É–±', 'month'),
      ],
    ]);
  }

  public getCommonKeyboard() {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('–ü–æ–¥–ø–∏—Å–∫–∞', 'subscription'),
        Markup.button.url('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/okay_ai_chat'),
      ],
    ]);
  }

  public getSubscriptionButton(date: string) {}

  public removeFreeRequest(extId: number): Observable<AddSubscriptionResponse> {
    return this.subscriptionService.removeFreeRequest(extId);
  }

  public hasActiveSubscription(
    extId: number,
  ): Observable<HasActiveSubscriptionResponse> {
    return this.subscriptionService.hasActiveSubscription(extId);
  }
}
